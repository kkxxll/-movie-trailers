{"version":3,"sources":["../06-async.js"],"names":["readAsync","data","JSON","parse","console","log","name","init","fs","require","readFile","cb","err","readFileAsync","Promise","resolve","reject","then","catch","co","util","promisify"],"mappings":";;;;;;;;;;;wFAkDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACqBA,UAAU,qBAAV,CADrB;;AAAA;AACQC,4BADR;;AAEIA,+BAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,gCAAQC,GAAR,CAAY,QAAZ,EAAsBJ,KAAKK,IAA3B;;AAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,I;;;;;;;AAlDf,IAAMC,KAAKC,QAAQ,IAAR,CAAX;;AAEA;AACA,SAASC,QAAT,CAAmBC,EAAnB,EAAuB;AACnBH,OAAGE,QAAH,CAAY,gBAAZ,EAA8B,UAACE,GAAD,EAAMX,IAAN,EAAe;AACzC,YAAIW,GAAJ,EAAS,OAAOD,GAAGC,GAAH,CAAP;AACTD,WAAG,IAAH,EAASV,IAAT;AACH,KAHD;AAKH;AACDS,SAAS,UAACE,GAAD,EAAMX,IAAN,EAAe;AACpB,QAAI,CAACW,GAAL,EAAU;AACNX,eAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,gBAAQC,GAAR,CAAYJ,KAAKK,IAAjB;AACH;AACJ,CALD;;AAOA;;AAEA,SAASO,aAAT,GAA0B;AACtB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCR,WAAGE,QAAH,CAAY,gBAAZ,EAA6B,UAACE,GAAD,EAAMX,IAAN,EAAe;AACxC,gBAAGW,GAAH,EAAQI,OAAOJ,GAAP,EAAR,KACKG,QAAQd,IAAR;AACR,SAHD;AAIH,KALM,CAAP;AAMH;;AAEDY,gBAAgBI,IAAhB,CAAqB,gBAAQ;AACzBhB,WAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;AACAG,YAAQC,GAAR,CAAY,UAAZ,EAAwBJ,KAAKK,IAA7B;AACH,CAHD,EAGGY,KAHH,CAGS,eAAO;AACZd,YAAQC,GAAR,CAAYO,GAAZ;AACH,CALD;;AAOA;AACA,IAAMO,KAAKV,QAAQ,IAAR,CAAX;AACA,IAAMW,OAAOX,QAAQ,MAAR,CAAb;;AAEAU,4CAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACkBC,KAAKC,SAAL,CAAeb,GAAGE,QAAlB,EAA4B,gBAA5B,CADlB;;AAAA;AACKT,wBADL;;;AAGCA,2BAAOC,KAAKC,KAAL,CAAWF,IAAX,CAAP;;AAEAG,4BAAQC,GAAR,CAAY,KAAZ,EAAmBJ,KAAKK,IAAxB;;AALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAH;;AAQA;AACA,IAAMN,YAAYoB,KAAKC,SAAL,CAAeb,GAAGE,QAAlB,CAAlB;;AASAH","file":"06-async.js","sourcesContent":["const fs = require('fs')\n\n// 第一阶段 回调函数\nfunction readFile (cb) {\n    fs.readFile('./package.json', (err, data) => {\n        if (err) return cb(err)\n        cb(null, data)\n    })\n\n}\nreadFile((err, data) => {\n    if (!err) {\n        data = JSON.parse(data)\n        console.log(data.name)\n    }\n})\n\n// 第二阶段 Promise\n\nfunction readFileAsync () {\n    return new Promise((resolve, reject) => {\n        fs.readFile('./package.json',(err, data) => {\n            if(err) reject(err)\n            else resolve(data)\n        })\n    })\n}\n\nreadFileAsync().then(data => {\n    data = JSON.parse(data)\n    console.log('promise:', data.name)\n}).catch(err => {\n    console.log(err)\n})\n\n// 第三阶段 借助co库\nconst co = require('co')\nconst util = require('util')\n\nco(function *() {\n    let data = yield util.promisify(fs.readFile)('./package.json')\n\n    data = JSON.parse(data)\n\n    console.log('co:', data.name)\n})\n\n// 第四阶段\nconst readAsync = util.promisify(fs.readFile)\n\nasync function init() {\n    let data = await readAsync('./package-lock.json')\n    data = JSON.parse(data)\n\n    console.log('async:', data.name)\n}\n\ninit()"]}